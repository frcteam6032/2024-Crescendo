// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;

import edu.wpi.first.wpilibj2.command.Command;
import frc.robot.Constants;
import frc.robot.subsystems.IntakeSubsystem;
import frc.robot.subsystems.IntakeWheels;

// We are assuming that the arm will already be in the correct position to intake the ring

// Only use this command when about to pick up a ring
public class AutomaticIntake extends Command {
    // This will be the amount of time we'll set the wheels to run AFTER we detect a ring
    private final IntakeWheels m_intakeWheels;
    private final IntakeSubsystem m_intakeSubsystem;

    public AutomaticIntake(IntakeWheels subsystem, IntakeSubsystem intakeSubsystem) {
        m_intakeWheels = subsystem;
        m_intakeSubsystem = intakeSubsystem;
        addRequirements(m_intakeWheels, intakeSubsystem);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }
    // Called every time the scheduler runs while the command is scheduled.

    // This is our accurate automatic intake system A.A.I.S
    @Override
    public void execute() {
        // We are going to have a distance sensor to automatically take in the rings

        // First we will put the intake wheels in reverse to take in the ring

        // IF we find a ring, we will do the following  process

        // Then we will run the intake wheels for a set amount of time to ensure the ring is in the robot


        if (m_intakeSubsystem.hasRing() == true) {

         if (m_intakeSubsystem.getAngle() > Constants.ArmConstants.min_limit) {
        System.out.println("Setting speed Negative [full] (down) [automatic]");
        // If the arm is near the min limit, reduce the speed
            if (m_intakeSubsystem.getAngle() <= Constants.ArmConstants.min_limit + 30) {
                //Arm is close to min limit
                System.out.println("Setting speed Negative [reduced] (down) [automatic]");
                m_intakeSubsystem.set_speed(-0.1);
                m_intakeSubsystem.set_speed(-0.1);
            }
            else {
                //Arm is not close to min limit
                   m_intakeSubsystem.set_speed(-0.2);
                  m_intakeSubsystem.set_speed(-0.2);

            }
        }
    
        }
        else {
            System.out.println("Setting speed 0 (stop) [automatic]");
            m_intakeSubsystem.set_speed(0);
            m_intakeSubsystem.set_speed(0);
        }
        
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {

        // Here we will stop the intake wheels
        m_intakeSubsystem.set_speed(0);
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {

        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }
}