// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;

import edu.wpi.first.wpilibj2.command.Command;
import frc.robot.Constants;
import frc.robot.subsystems.IntakeSubsystem;
import frc.robot.subsystems.IntakeWheels;

// We are assuming that the arm will already be in the correct position to intake the ring

// Only use this command when about to pick up a ring
public class ScoreAmp extends Command {
    // This will be the amount of time we'll set the wheels to run AFTER we detect a
    // ring
    private final IntakeWheels m_intakeWheels;
    private final IntakeSubsystem m_intakeSubsystem;

    public ScoreAmp(IntakeWheels subsystem, IntakeSubsystem intakeSubsystem) {
        m_intakeWheels = subsystem;
        m_intakeSubsystem = intakeSubsystem;
        addRequirements(m_intakeWheels, intakeSubsystem);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
    }
    // Called every time the scheduler runs while the command is scheduled.

    // This is our accurate automatic intake system A.A.I.S
    @Override
    public void execute() {
        // If we are within 2 degrees of 90, then we stop the arm

        if (Math.abs(m_intakeSubsystem.getAngle() - Constants.ArmConstants.mid_limit) < 2) {
            m_intakeSubsystem.set_speed(0);
        }
        // If we are greater than 90 degrees and less than the max limit, we will go
        // backwards/down
        else if (m_intakeSubsystem.getAngle() > Constants.ArmConstants.mid_limit
                && m_intakeSubsystem.getAngle() > Constants.ArmConstants.min_limit) {
            m_intakeSubsystem.set_speed(-0.3);
        }
        // If we are less than 90 degrees and greater than the min limit, we will go
        // forwards/up
        else if (m_intakeSubsystem.getAngle() < Constants.ArmConstants.mid_limit
                && m_intakeSubsystem.getAngle() < Constants.ArmConstants.max_limit) {
            m_intakeSubsystem.set_speed(0.3);
        } else {
            // If we are outside of the limits, we will stop the arm
            m_intakeSubsystem.set_speed(0);

        }

    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {

        // Here we will stop the intake wheels
        m_intakeSubsystem.set_speed(0);

    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }
}